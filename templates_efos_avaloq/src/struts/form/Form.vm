package ${package}.web.struts.form;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import javax.servlet.http.HttpServletRequest;
import java.util.Date;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMapping;
import java.util.List;
import java.util.Date;
import com.maa.core.web.struts.form.BaseActionForm;
import ${package}.model.${bean.className}Model;

#foreach ($relationship in $root.relationship)
#if ($relationship.parentBeanName == $bean.name && $strings.capitalizeFirstLetter($relationship.childMultiplicity) == 'One')
import ${package}.components.${relationship.childBeanName.toLowerCase()}.entities.*;
#end
#end

/**
 * The ActionForm object is used to hold and validate values for the 
 * $bean.name form.
 */
public class ${bean.className}Form extends BaseActionForm
{

    // attributes
#foreach ($attribute in $bean.attribute)
	#if($attribute.primaryKey )
    // the Primary Key $attribute.title.toLowerCase()
    private String[]  ${attribute.name}s;
	#end

    // the $attribute.title.toLowerCase()
    private $attribute.type $attribute.name;
#end

	private List ${bean.name}List;
	public List get${bean.className}List() { return ${bean.name}List; }
	public void set${bean.className}List (List ${bean.name}List) { this.${bean.name}List = ${bean.name}List; }

    // relationship attributes
#foreach ($relationship in $root.relationship)
#if ($relationship.parentBeanName == $bean.name && $relationship.childMultiplicity.toLowerCase() == 'one')
#foreach ($bean in $root.bean)
#if ($bean.name == $relationship.childBeanName)
#foreach ($attribute in $bean.attribute)
#if (!$attribute.primaryKey)
    // the $relationship.childBeanName $attribute.title.toLowerCase()
    private $strings.capitalizeFirstLetter($attribute.type) $attribute.name = #if ($attribute.type == 'string') ""#else new $strings.capitalizeFirstLetter($attribute.type)(0)#end;
#end
#end
#end
#end
#elseif ($relationship.childBeanName == $bean.name && $relationship.childMultiplicity.toLowerCase() == 'many')
    // the id of the ${relationship.parentBeanName} this $bean.name belongs to
    private Integer ${relationship.parentBeanName.toLowerCase()}Id = new Integer(0);
#elseif ($relationship.parentBeanName == $bean.name && $relationship.parentMultiplicity.toLowerCase() == 'many')

    // the id of the ${relationship.childBeanName} this $bean.name belongs to
    private Integer ${relationship.childBeanName.toLowerCase()}Id = new Integer(0);
#end
#end

#foreach ($attribute in $bean.attribute)
    #if($attribute.primaryKey)
    /**
     * Returns the value of the $attribute.title
     * @return the ${attribute.name}s
     */
    public String[] get$strings.capitalizeFirstLetter(${attribute.name})s() {
        return ${attribute.name}s;
    }

    /**
     * Sets the value of the $attribute.title
     * @param $attribute.name the $attribute.title
     */
    public void set$strings.capitalizeFirstLetter(${attribute.name})s(String[] ${attribute.name}s) {
    	this.${attribute.name}s = ${attribute.name}s;
    }
	#end

    /**
     * Returns the value of the $attribute.title
     * @return the $attribute.name
     */
    public $strings.capitalizeFirstLetter($attribute.type) get${strings.capitalizeFirstLetter($attribute.name)}() {
    	return $attribute.name;
    }

    /**
     * Sets the value of the $attribute.title
     * @param $attribute.name the $attribute.title
     */
    public void set${strings.capitalizeFirstLetter($attribute.name)}($strings.capitalizeFirstLetter($attribute.type) ${attribute.name}) {
    	this.$attribute.name = $attribute.name;
    }
#end


    // relationship getter/setters
#foreach ($relationship in $root.relationship)
	#if ($relationship.parentBeanName == $bean.name && $relationship.childMultiplicity.toLowerCase() == 'one')
	#foreach ($bean in $root.bean)
	#if ($bean.name == $relationship.childBeanName)
	#foreach ($attribute in $bean.attribute)
	#if (!$attribute.primaryKey)
    /**
     * Returns the value of the $attribute.title
     * @return the $attribute.name
     */
    public $strings.capitalizeFirstLetter($attribute.type) get${strings.capitalizeFirstLetter($attribute.name)}() {
    	return $attribute.name;
    }

    /**
     * Sets the value of the $attribute.title
     * @param $attribute.name the $attribute.title
     */
    public void set${strings.capitalizeFirstLetter($attribute.name)}($strings.capitalizeFirstLetter($attribute.type) ${attribute.name}) {
    	this.$attribute.name = $attribute.name;
    }
	#end
	#end
	#end
	#end
	#elseif ($relationship.childBeanName == $bean.name && $relationship.childMultiplicity.toLowerCase() == 'many')
	#set ($relName = $strings.capitalizeFirstLetter($relationship.parentBeanName.toLowerCase()))
    /**
     * Returns the id of the ${relName} this $strings.capitalizeFirstLetter(${bean.name}) belongs to
     * @return the ${relName} Id
     */
    public Integer get${relName}Id() {
    	return ${relName.toLowerCase()}Id;
    }

    /**
     * Sets the id of the ${relName} this $strings.capitalizeFirstLetter(${bean.name}) belongs to
     * @param ${relName.toLowerCase()}Id the ${relName} Id
     */
    public void set${relName}Id(Integer ${relName.toLowerCase()}Id) {
    	this.${relName.toLowerCase()}Id = ${relName.toLowerCase()}Id;
    }
	#elseif ($relationship.parentBeanName == $bean.name && $relationship.parentMultiplicity.toLowerCase() == 'many')
	#set ($relName = $strings.capitalizeFirstLetter($relationship.childBeanName.toLowerCase()))
    /**
     * Returns the id of the ${relName} this $strings.capitalizeFirstLetter(${bean.name}) belongs to
     * @return the ${relName} Id
     */
	public Integer get${relName}Id() {
    	return ${relName.toLowerCase()}Id;
	}

    /**
     * Sets the id of the ${relName} this $strings.capitalizeFirstLetter(${bean.name}) belongs to
     * @param ${relName.toLowerCase()}Id the ${relName} Id
     */
    public void set${relName}Id(Integer ${relName.toLowerCase()}Id) {
    	this.${relName.toLowerCase()}Id = ${relName.toLowerCase()}Id;
    }
	#end
#end

    /**
     * Validate the submitted values 
     */
    public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
        ActionErrors errors = new ActionErrors();
	return errors;
    } 

    /**
     * This resets all the form values back to defaults, part of struts framework
     */
    public void reset(ActionMapping mapping, HttpServletRequest request) {
#foreach ($attribute in $bean.attribute)
//        $attribute.name =#if ($attribute.type == 'string') ""#else new $strings.capitalizeFirstLetter($attribute.type)(0)#end;
#end

#foreach ($relationship in $root.relationship)
		#if ($relationship.parentBeanName == $bean.name && $relationship.childMultiplicity.toLowerCase() == 'one')
		#foreach ($bean in $root.bean)
		#if ($bean.name == $relationship.childBeanName)
		#foreach ($attribute in $bean.attribute)
		#if (!$attribute.primaryKey)
      	$attribute.name =#if ($attribute.type == 'string') ""#else new $strings.capitalizeFirstLetter($attribute.type)(0)#end;
		#end
		#end
		#end
		#end
		#elseif ($relationship.childBeanName == $bean.name && $relationship.childMultiplicity.toLowerCase() == 'many')
      	${relationship.parentBeanName.toLowerCase()}Id = new Integer(0);
		#elseif ($relationship.parentBeanName == $bean.name && $relationship.parentMultiplicity.toLowerCase() == 'many')
      	${relationship.childBeanName.toLowerCase()}Id = new Integer(0);
		#end
#end
  	} 

  	public ${bean.className}Model populateModel () {
		${bean.className}Model model = new ${bean.className}Model();
#foreach ($attribute in $bean.attribute)
        model.set$strings.capitalizeFirstLetter($attribute.name)($attribute.name);
#end
        
        System.out.println(model);
        return model;
  	}

  	public void populateForm(${bean.className}Model model) {
#foreach ($attribute in $bean.attribute)
		$attribute.name = model.get${strings.capitalizeFirstLetter($attribute.name)}();
#end
		System.out.println(this);
  	}

    /**
     * A toString method that can be used in any class.
     * uses reflection to dynamically print java class field values one line at a time.
     * Requires the Apache Commons ToStringBuilder class.
     */
    public String toString() {
        return ToStringBuilder.reflectionToString(this,
        ToStringStyle.MULTI_LINE_STYLE);
    }

} // end of ${bean.className}Form